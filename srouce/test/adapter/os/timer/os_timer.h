#include "def.h"

/***************************************************************************
* 描述: 相关配置宏，及一些基础声明、定义。
***************************************************************************/

//定时器触发中心的触发周期，为了保证定时器精度建议不要超过1分钟。
#define OS_TIMER_CORE_CRYCLE_SEC (60)

//定时器最多支持的数目。
#define OS_TIMER_MAX_NUM         (8)

//定时器回调任务。
typedef ALM_VOID (*OsTimerTaskFn)(ALM_VOID* pPara);

/***************************************************************************
* 描述: 初始化定时器模块。
***************************************************************************/
ALM_INT32 OS_TimerStart();

/***************************************************************************
* 描述: 关闭定时器模块。
***************************************************************************/
ALM_INT32 OS_TimerClose();

/***************************************************************************
* 描述: 启动一个周期任务相对定时器。时间间隔单位为毫秒。
***************************************************************************/
ALM_INT32 OS_TimerNew(ALM_UINT32 uiTimerId,
    ALM_UINT32 uiCycleMSecs,
    OsTimerTaskFn pfnTmCallBack,
    ALM_VOID* pData,
    ALM_UINT32* puiMaxLockMSecs);


/***************************************************************************
* 描述: 停止定时器。
***************************************************************************/
ALM_INT32 OS_TimerDel(ALM_UINT32 ulTmHandler);

/***************************************************************************
* 描述: 增加(iSecs/ALM_TIMER_SEG_SECOND)*ALM_TIMER_SEG_SECOND 的时间量，
*       并同时模拟触发全部定时器。
***************************************************************************/
ALM_VOID OS_TimerRunSecs(ALM_INT32 iSecs);

/***************************************************************************
* 描述: 以指定时间间隔进行循环触发的触发器。
***************************************************************************/
ALM_INT32 OS_StartTrigger(ALM_INT32 iCycleSecs, OsTimerTaskFn fnTrigger, ALM_VOID* pPara);

/***************************************************************************
* 描述: 停止触发器。
***************************************************************************/
ALM_VOID OS_StopTrigger(ALM_UINT64 ulTriggerId);

//阻塞全部定时器。但允许使用函数OS_TimerRunSecs调用。
ALM_VOID OS_TimerBlock();

//恢复全部定时器。
ALM_VOID OS_TimerRecover();
